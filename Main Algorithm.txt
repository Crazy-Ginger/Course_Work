Imports System
Imports System.IO
Imports System.Net
Imports System.Text
Imports System.Data
Imports System.Threading
Imports System.Xml


Module Program
    Public Event UnhandledException As UnhandledExceptionEventHandler
    Sub Main()
        Dim latLngKey As String = "AIzaSyA3A7tDgpFISYEY3B5qYdXm9StRa0pJkcA"
        Dim waypointkey As String = "AIzaSyBqN-1pDwR8taEDQESDP5mnJjiJkIXmv-w"
        Dim cont As Boolean = False
        Dim locations As New List(Of String)
        Dim input As String = ""
        Dim domain As System.Net.HttpWebRequest = System.Net.HttpWebRequest.Create("https://maps.googleapis.com/maps/api/directions/xml?origin=HD22EB&destination=Manchester&key=AIzaSyBqN-1pDwR8taEDQESDP5mnJjiJkIXmv-w")
        Console.WriteLine(Connected(domain))
        Console.WriteLine(Connected("www.google.com"))

        Do Until cont = False And locations.Count >= 2
            input = Console.ReadLine()
            locations.Add(input)
            Console.WriteLine("Would you like to add more destinations?")
            cont = Console.ReadLine()
        Loop

        Dim length As Integer = locations.Count
        If length < 11 Then
            Console.WriteLine(Bruteforce(length, locations))
        Else console.WriteLine(Approximation(length, locations))
        End If

        'Dim nodes(locations.Count - 1, 1) As Integer
        ' For i As Integer = 0 To locations.Count
        ' nodes(i, 0) = FindLat(locations.Item(i))
        '    nodes(i, 1) = FindLng(locations.Item(i))
        ' Next

        Console.ReadLine()
    End Sub


    Function Connected(website) As Boolean
        Try
            Return My.Computer.Network.Ping(website)
        Catch
            Return False
        End Try
    End Function
    Sub MyHandler(sender As Object, args As UnhandledExceptionEventArgs)
        Dim e As Exception = DirectCast(args.ExceptionObject, Exception)
        Console.WriteLine("MyHandler caught : " + e.Message)
        Console.WriteLine("Runtime terminating: {0}", args.IsTerminating)
    End Sub

    Function Waypointing(ByVal start As String, ByVal finish As String, ByVal key As String)
        Dim output As StringBuilder = New StringBuilder()

        'Dim request As System.Net.HttpWebRequest = System.Net.HttpWebRequest.Create("https://maps.googleapis.com/maps/api/directions/xml?origin=" & start & "&destination=" & finish & "&key=" & key)
        Dim request As System.Net.HttpWebRequest = System.Net.HttpWebRequest.Create("https://maps.googleapis.com/maps/api/directions/xml?origin=HD22EB&destination=Manchester&key=AIzaSyBqN-1pDwR8taEDQESDP5mnJjiJkIXmv-w")

        Using client = New WebClient()

            Dim response As System.Net.HttpWebResponse = request.GetResponse()
            If response.StatusCode = System.Net.HttpStatusCode.OK Then
                Dim stream As System.IO.Stream = response.GetResponseStream()
                Dim IOreader As New System.IO.StreamReader(stream)
                Dim contents As String = IOreader.ReadToEnd()
                Dim xmldoc As New System.Xml.XmlDocument()
                xmldoc.LoadXml(contents)

                Using xmlreader As XmlReader = XmlReader.Create(contents)
                    xmlreader.ReadToFollowing("<duration>")
                    xmlreader.MoveToNextAttribute()
                    Dim time As String = xmlreader.Value
                    output.AppendLine("It will take: " & time & " to get to " & finish)
                    output.AppendLine("This is: " & ((CInt(time)) \ 360) & " hours and " & ((CInt(time)) Mod 360) & "minutes")
                End Using
            End If
        End Using
        Return output
    End Function

    Public Function Approximation(ByVal length As Integer, ByVal nodes As List(Of String))
        Dim order(length - 1) As String
        Dim nodesLeft As Integer = length - 1
        Dim currentNode As String = nodes.Item(0)
        For i As Integer = 0 To nodesLeft
            Dim shortestRoute As Integer = 2147483647

        Next
        Return nodes
    End Function


    Public Function Bruteforce(n As Integer, nodes As List(Of String))
        'Generate, count and print (if printem is not false) all permutations of first n integers
        Dim P() As Integer
        Dim t As Integer, i As Integer, j As Integer, k As Integer
        Dim count As Long
        Dim Last As Boolean

        If n <= 1 Then
            'Debug.Print "Please give a number greater than 1"
            Return Nothing
            Exit Function
        End If

        'Initialize
        ReDim P(n)
        For i = 1 To n
            P(i) = i
        Next
        count = 0
        Last = False
        Do While Not Last
            'print?
            For t = 1 To n
                Console.Write(P(t) & ", ")
                'Debug.Print P(t)
            Next
            Console.WriteLine()
            'Debug.Print()
            count = count + 1
            Last = True
            i = n - 1
            Do While i > 0
                If P(i) < P(i + 1) Then
                    Last = False
                    Exit Do
                End If
                i = i - 1
            Loop
            j = i + 1
            k = n
            While j < k

                ' Swap p(j) and p(k)
                t = P(j)
                P(j) = P(k)
                P(k) = t
                j = j + 1
                k = k - 1
            End While
            j = n
            While P(j) > P(i)
                j = j - 1
            End While
            j = j + 1

            'Swap p(i) and p(j)
            t = P(i)
            P(i) = P(j)
            P(j) = t
        Loop 'While not last

        'Debug.Print "Number of permutations: "; count
        Console.WriteLine(count)
        Console.ReadLine()
        Return Nothing
    End Function


    Function FindLat(ByVal destination As String, ByVal key As String)
        'https://www.aspsnippets.com/Articles/Find-Co-ordinates-Latitude-And-Longitude-of-an-Address-Location-using-Google-Geocoding-API-in-ASPNet-using-C-And-VBNet.aspx
        Dim url2 As String = "https://maps.googleapis.com/maps/api/geocode/json?address=" & destination & "&key=" & key

        'links to google's API stuff (really really useful)  https://developers.google.com/maps/documentation/geocoding/start?hl=en_US
        'https://developers.google.com/maps/documentation/directions/intro#Waypoints
        'https://developers.google.com/maps/documentation/directions/?hl=en_US

        Dim request As WebRequest = WebRequest.Create(url2)
        Using response As WebResponse = DirectCast(request.GetResponse(), HttpWebResponse)
            Using reader As New StreamReader(response.GetResponseStream(), Encoding.UTF8)
                Dim dsResult As New DataSet()
                dsResult.ReadXml(reader)
                Dim dtCoordinates As New DataTable()
                dtCoordinates.Columns.AddRange(New DataColumn(3) {New DataColumn("Id", GetType(Integer)), New DataColumn("Address", GetType(String)), New DataColumn("Latitude", GetType(String)), New DataColumn("Longitude", GetType(String))})
                Dim geometry_id As String = dsResult.Tables("geometry").[Select]("result_id = " + ("result_id").ToString())(0)("geometry_id").ToString()
                Dim location As DataRow = dsResult.Tables("location").[Select](Convert.ToString("geometry_id = ") & geometry_id)(0)
                'dtCoordinates.Rows.Add(row("result_id"), row("formatted_address"), location("lat"), location("lng"))
                Return location("Lat")
            End Using
        End Using
    End Function
End Module

'https://github.com/softwarenerd/GreatCircle objective C code for finding the distance between 2 points on Earth given Longitude and Latitude
'https://www.movable-type.co.uk/scripts/latlong.html explanation as to how to calculate the distance between 2 points on Earth

